openapi: 3.0.0
info:
  title: API post management
  description: Swagger api documentation
  version: 0.1.9
servers:
  - url: http://localhost:3000
tags: [        
    {
      name: 'Users',         
      description: 'Endpoint api',  
    },  
  ]     
paths:
  /signup:
    post:
      sumary: Sign up 
      description: Sign up a account user
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
  /signin:
    post:
      sumary: Sign in 
      description: Sign in application
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Success
  /users/profile:
    get:
      sumary: Profile 
      description: Get infomation of user
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success  
    put:
      sumary: Update Profile
      description: Update profile of user 
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                dob:
                  type: string
                  format: date
                gender: 
                  type: boolean
                avatar:
                  type: string
      responses:
        '200':
          description: Success
  /users:
    get:
      summary: search for other users
      description: By passing in the appropriate options, you can search for
        either name or email of user
      consumes:
      - application/json
      produces:
      - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          description: pass an optional search string for looking up user
          required: false
          type: string
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      responses:
        '200':
          description: Success 
  /users/following:
    get:
      summary: get all the users that current user follow and
        also support search query
      description: Display all the following users.
        By passing in the appropriate options, you can search for
        either name or email of an user that current user are 
        following
      consumes:
      - application/json
      produces:
      - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: search
          description: pass an optional search string for looking up other following user
          required: false
          type: string
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      responses:
        '200':
          description: Success
  /users/{id}/follow:
    post:
      summary: follow/unfollow an user
      description: adds/removes a relation between follower and followed to the system
      consumes:
      - application/json
      produces:
      - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user that current user want to follow/unfollow
      responses:
        '200':
          description: Followed/Unfollowed
  /posts/images:
    get:
      sumary: Images user 
      description: Get list images of user
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: sort_by
          schema:
            type: string
          description: sort by attribute
        - in: query
          name: order_by
          schema:
            type: string
          description: sort ascending or descending
      responses:
        '200':
          description: Success
  /posts/images/{id}:
    put:
      sumary: Update caption image 
      description: Use to update caption image
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          schema:
            type: integer
          description: The image id
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                caption:
                  type: string
      responses:
        '200':
          description: Success
    delete:
      sumary: Update caption image 
      description: Use to update caption image
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id   # Note the name is the same as in the path
          required: true
          schema:
            type: integer
          description: The image id
      responses:
        '200':
          description: Success   
  /posts/{id}/comments:
    get:
      summary: show all comments of a post
      description: display all the comments of a post
      consumes:
      - application/json
      produces:
      - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The post that contains all the comments that you are looking for
        - in: query
          name: sort_by
          schema:
            type: string
          description: sort by attribute
        - in: query
          name: order_by
          schema:
            type: string
          description: sort ascending or descending
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          format: int32
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: int32
          minimum: 0
          maximum: 50
      responses:
        '200':
          description: Success
  /posts/{id}/comments/{comment_id}:
    delete:
      summary: remove a comment
      description: delete a comment of a post
      consumes:
      - application/json
      produces:
      - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The post that contains all the comments that you are looking for
        - in: path
          name: comment_id
          required: true
          schema:
            type: integer
          description: The comment that you want to delete
      responses:
        '200':
          description: Deleted
  /posts/{id}/comments/{comment_id}/like:
    post:
      summary: like/unlike a comment
      description: adds/removes a relation between user and liked comment to the system
      consumes:
      - application/json
      produces:
      - application/json
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The post that contains all the comments that you are looking for
        - in: path
          name: comment_id
          required: true
          schema:
            type: integer
          description: The comment that you want to like/unlike
      responses:
        '200':
          description: Liked/Unliked
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        dob:
          type: string
          format: date
        gender: 
          type: boolean
        avatar:
          type: string
      require:
        - id
        - first_name
        - last_name
        - email
        - password
        - dob
        - gender
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        description:
          type: string
        created_at:
          type: string
          format: date-time
        use_id:
          type: integer
          readOnly: true
      require:
        - id
        - created_at
        - user_id
    PostReact:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user_id:
          type: integer
          readOnly: true
        post_id:
          type: integer
          readOnly: true
      require:
        - id
        - post_id
        - user_id
    Image:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        path:
          type: string
        caption:
          type: string
        post_id:
          type: integer
          readOnly: true
      require:
          - id
          - path
          - post_id 
    Follower:
      type: object
      properties:
        follower_id:
          type: integer
          readOnly: true
        followed_id:
          type: integer
          readOnly: true
      require:
          - follower_id
          - followed_id
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
        created_at:
          type: string
          format: date-time
        parent_cmt_id:
          type: integer
          readOnly: true
        user_id:
          type: integer
          readOnly: true
        post_id:
          type: integer
          readOnly: true
      require:
          - id
          - text
          - created_at
          - user_id
          - post_id
    CommentReact:
      type: object
      properties:
        user_id:
          type: integer
          readOnly: true
        comment_id:
          type: integer
          readOnly: true
      require:
          - user_id
          - comment_id
  securitySchemes:
    bearerAuth:
      type: apiKey
      description: Enter your bearer token in the format `Bearer <token>`
      name: Authorization
      in: header
      scheme: bearer
      bearerFormat: JWT